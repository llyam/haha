class Solution {
public:
    int num[9050];
    int find(int a) {
        if (num[a] != a) num[a] = find(num[a]);
        return num[a];
    }
    void bind(int a, int b) {
        int x = find(a);
        int y = find(b);
        if (x == y) return ;
        if (x > y) {
            int temp = x;
            x = y;
            y = temp;
        }
        num[y] = x;
    }

    int regionsBySlashes(vector<string>& grid) {
        int n = grid.size();
        int size = n * n * 4;
        for (int i = 0; i < size + 3; i++) {
            num[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                int root = (i * n + j) * 4;
                if (grid[i][j] == ' ') {
                    bind(root + 0, root + 1);
                    bind(root + 1, root + 2);
                    bind(root + 2, root + 3);
                } else if (grid[i][j] == '/') {
                    bind(root + 0, root + 3);
                    bind(root + 2, root + 1);
                } else if (grid[i][j] == '\\') {
                    bind(root + 0, root + 1);
                    bind(root + 2, root + 3);
                }
                if (i > 0) {
                    int zbc = root - 4 * n;
                    bind(zbc + 2, root + 0);
                }
                if (i < n - 1) {
                    int zbc = root + 4 * n;
                    bind(zbc + 0, root + 2);
                }
                if (j > 0) {
                    int zbc = root - 4;
                    bind(zbc + 1, root + 3);
                }
                if (j < n - 1) {
                    int zbc = root + 4;
                    bind(zbc + 3, root + 1);
                }
            }
        }
        int re = 0;
        for (int i = 0; i < size; i++) {
            if (find(i) == i) re++;
        }
        return re;
    }
};
